from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.models.models import User, Reminder, RepeatType
from bot.keyboards.keyboards import (
    get_main_keyboard,
    get_repeat_keyboard,
    get_reminder_actions_keyboard,
    get_reminders_list_keyboard
)
from bot.utils.date_parser import parse_datetime, parse_reminder_text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bot.utils.job_functions import send_reminder
router = Router()



MSG_TXT = """
–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.


–í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ:
- –∑–∞–≤—Ç—Ä–∞ –æ 15:00
- –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ –æ 12:00
- –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 18:30
- —Å—å–æ–≥–æ–¥–Ω—ñ –æ –ø—ñ–≤–Ω–æ—á—ñ
- 09.04.2025 23:00

–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:
date#09.04.2025 time#23:00 repeat#daily

–¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å:
- —â–æ–¥–µ–Ω–Ω–æ
- —â–æ—Ç–∏–∂–Ω—è
- –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
"""


class ReminderStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_time = State()
    waiting_for_repeat = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    user, _ = await User.get_or_create(telegram_id=message.from_user.id)
    await message.answer(     
        "üëã –í—ñ—Ç–∞—é –≤ –±–æ—Ç—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å!\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏:",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "add_reminder")
async def add_reminder(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ReminderStates.waiting_for_text)
    await callback.message.edit_text(MSG_TXT)


@router.message(ReminderStates.waiting_for_text)
async def process_reminder_text(message: Message, state: FSMContext, scheduler: AsyncIOScheduler):
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
        return
    
    # –ü–∞—Ä—Å–∏–º–æ —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    parsed = parse_reminder_text(message.text)
    
    
    # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
    if parsed["remind_at"]:
        if parsed["remind_at"] < datetime.now():
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—é –¥–∞—Ç—É —Ç–∞ —á–∞—Å!")
            return
            
        user = await User.get(telegram_id=message.from_user.id)
        reminder = await Reminder.create(
            user=user,
            **parsed
        )
            
        job = scheduler.add_job(send_reminder, name=f"user:{user.telegram_id}:task_id:{reminder.id}", trigger='date', run_date=parsed["remind_at"], args=[reminder.id])
        await message.answer(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n\n"
            f"–¢–µ–∫—Å—Ç: {parsed['text']}\n"
            f"–ß–∞—Å: {parsed['remind_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å: {parsed['repeat'].value}"
        )
            
        # –Ø–∫—â–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –∑–∞–ø–∏—Ç—É—î–º–æ —ó—ó
        await state.set_state(ReminderStates.waiting_for_repeat)
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
            reply_markup=get_repeat_keyboard()
        )
        return
    
    # –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø–∏—Ç—É—î–º–æ —ó—ó
    await state.set_state(ReminderStates.waiting_for_time)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "- –∑–∞–≤—Ç—Ä–∞ –æ 15:00\n"
        "- –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ –æ 12:00\n"
        "- –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 18:30\n"
        "- —Å—å–æ–≥–æ–¥–Ω—ñ –æ –ø—ñ–≤–Ω–æ—á—ñ\n"
        "- 09.04.2025 23:00"
    )


@router.message(ReminderStates.waiting_for_time)
async def process_reminder_time(message: Message, state: FSMContext, scheduler: AsyncIOScheduler):
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å.")
        return
        
    remind_at = parse_datetime(message.text)
    if not remind_at:
        await message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "- –∑–∞–≤—Ç—Ä–∞ –æ 15:00\n"
            "- –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ –æ 12:00\n"
            "- –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 18:30\n"
            "- —Å—å–æ–≥–æ–¥–Ω—ñ –æ –ø—ñ–≤–Ω–æ—á—ñ\n"
            "- 09.04.2025 23:00"
        )
        return

    if remind_at < datetime.now():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—é –¥–∞—Ç—É —Ç–∞ —á–∞—Å!")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É —è–∫ —Ä—è–¥–æ–∫ ISO —Ñ–æ—Ä–º–∞—Ç—É
    await state.update_data(remind_at=remind_at.isoformat())
    await state.set_state(ReminderStates.waiting_for_repeat)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_repeat_keyboard()
    )


@router.callback_query(F.data.startswith("repeat_"))
async def process_repeat_option(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    repeat_type = callback.data.split("_")[1]
    data = await state.get_data()
    
    user = await User.get(telegram_id=callback.from_user.id)
    reminder = await Reminder.create(
        user=user,
        text=data["text"],
        remind_at=datetime.fromisoformat(data["remind_at"]),
        repeat=RepeatType(repeat_type)
    )

    await scheduler.schedule_reminder(reminder)
    await callback.message.edit_text(
        f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n\n"
        f"–¢–µ–∫—Å—Ç: {data['text']}\n"
        f"–ß–∞—Å: {datetime.fromisoformat(data['remind_at']).strftime('%d.%m.%Y %H:%M')}\n"
        f"–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å: {repeat_type}"
    )
    await state.clear()


@router.callback_query(F.data == "list_reminders")
async def list_reminders(callback: CallbackQuery):
    user = await User.get(telegram_id=callback.from_user.id)
    reminders = await Reminder.filter(user=user, is_active=True)
    
    if not reminders:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
        return

    await callback.message.edit_text(
        "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_reminders_list_keyboard(reminders)
    )


@router.callback_query(F.data.startswith("reminder_"))
async def show_reminder_details(callback: CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    reminder = await Reminder.get_or_none(id=reminder_id)
    
    if not reminder:
        await callback.message.edit_text("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await callback.message.edit_text(
        f"–î–µ—Ç–∞–ª—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\n"
        f"–¢–µ–∫—Å—Ç: {reminder.text}\n"
        f"–ß–∞—Å: {reminder.remind_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å: {reminder.repeat.value}",
        reply_markup=get_reminder_actions_keyboard(reminder.id)
    )


@router.callback_query(F.data.startswith("delete_"))
async def delete_reminder(callback: CallbackQuery, scheduler: AsyncIOScheduler):
    reminder_id = int(callback.data.split("_")[1])
    reminder = await Reminder.get_or_none(id=reminder_id)
    
    if not reminder:
        await callback.message.edit_text("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await scheduler.remove_reminder(reminder.id)
    reminder.is_active = False
    await reminder.save()
    
    await callback.message.edit_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")


@router.callback_query(F.data.startswith("edit_"))
async def edit_reminder(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    reminder_id = int(callback.data.split("_")[1])
    reminder = await Reminder.get_or_none(id=reminder_id)
    
    if not reminder:
        await callback.message.edit_text("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await state.update_data(reminder_id=reminder_id)
    await state.set_state(ReminderStates.waiting_for_text)
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ:\n"
        "- –∑–∞–≤—Ç—Ä–∞ –æ 15:00\n"
        "- –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ –æ 12:00\n"
        "- –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 18:30\n"
        "- —Å—å–æ–≥–æ–¥–Ω—ñ –æ –ø—ñ–≤–Ω–æ—á—ñ\n"
        "- 09.04.2025 23:00\n\n"
        "–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:\n"
        "date#09.04.2025 time#23:00 repeat#daily\n\n"
        "–¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—å:\n"
        "- —â–æ–¥–µ–Ω–Ω–æ\n"
        "- —â–æ—Ç–∏–∂–Ω—è\n"
        "- –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è"
    ) 